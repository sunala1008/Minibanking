#include <iostream>
#include <string>
using namespace std;

/*
	 ▶ 다형성 Polymorphism ◀ ★★★★★
	   - 하나로 여러가지 표현을 가능하게 하는 것

	   - 오버라이딩


*/

// 사원 관리 프로그램 => OOP 특성 중 다형성 적용 중
// 부모 클래스 : Employee
// 정규직 : PermanentWorker
// 영업직 : SalewWorker
// 아르바이트직 : AlbaWorker

class Employee
{
private:
	char name[100];

public:
	Employee(const char * name)
	{
		strcpy(this->name, name);
	}

	void ShowYourName() const
	{
		cout << "이름 : " << name << endl;
	}
};


class PermanentWorker : public Employee	// 정규직 클래스
{
private:
	int salary;

public:
	PermanentWorker(const char * name, int money) : Employee(name), salary(money)	// 생성자
	{}

	int GetPay() const	// 급료 조회 함수
	{
		return salary;
	}

	void ShowSalaryInfo() const // 정규직 정보 출력 함수
	{
		ShowYourName();
		cout << "급여 : " << GetPay() << endl << endl;
	}
};

class SalesWorker : public PermanentWorker	// 영업직
{
private:
	int salesResult;	// 판매 실적
	double bonusRatio;  // 인센티브율

public:
	SalesWorker(const char * name, int money, double ratio)
		: PermanentWorker(name, money), salesResult(0), bonusRatio(ratio)
	{}

	void AddSalesResult(int value)
	{
		salesResult += value;
	}

	int GetPay() const // 오버라이딩(상속관계 일 때) // 상속관계가 아닐 때는 오버로딩
	{	// 기본급 + 인센티브
		return PermanentWorker::GetPay() + (int)(salesResult * bonusRatio);
	}

	void ShowSalaryInfo() const
	{
		ShowYourName();
		cout << "salary : " << GetPay() << endl << endl;
	}
};

class AlbaWorker : public Employee // 알바 클래스
{
private:
	int workTime;	// 일한 시간
	int payPerHour; // 시급

public:
	AlbaWorker(const char * name, int pay)
		: Employee(name), workTime(0), payPerHour(pay)
	{}

	void AddWorkTime(int time)
	{
		workTime += time;
	}

	int GetPay() const // 여기서는 오버라이딩 아님 => Employee에 GetPay()가 없어서
	{
		return workTime * payPerHour;
	}

	void ShowSalaryInfo() const
	{
		ShowYourName();
		cout << "salary : " << GetPay() << endl << endl;
	}
};

class EmployeeHandler	// 사원 관리 클래스
{
private:
	// 사원관리 배열
	// Employee * emp = new Employee();
	// Employee * emp = new PermanentWorker();
	// Employee * emp = new SalesWorker();
	// Employee * emp = new AlbaWorker();

	Employee * empList[50]; // 주소만 저장-50개
	// 정규직이미녀서 사무직, 정규직이면서 영업직
	int empNum;					   // 생성자를 통해 얘만 초기화해주면 됨

public:
	EmployeeHandler() : empNum(0)	// 생성자
	{}

	void AddEmployee(Employee* emp)	// 사원 추가 함수
	{
		empList[empNum++] = emp;
	}

	void ShowAllsalaryInfo() const	// 전체 사원 정보 출력 함수
	{
		/*for (int i = 0; i < empNum; i++)
		{
			cout << i + 1 << "번째 사원의 정보" << endl;
			empList[i]->ShowSalaryInfo();
		}*/
	}

	void ShowTotalSalary() const	// 총 급여 출력 함수
	{
		int sum = 0;

		/*for (int i = 0; i < empNum; i++)
		{
			sum += empList[i]->GetPay();

			cout << "총 급여 : " << sum << endl;
		}*/
	}

	~EmployeeHandler()	// 소멸자
	{
		for (int i = 0; i < empNum; i++)
		{
			delete empList[i];
		}
	}
};

int main(void)
{
	// 직원관리를 위한 클래스 객체 생성
	EmployeeHandler empHdr;

	// 직원 등록 - 3명
	empHdr.AddEmployee(new PermanentWorker("홍길동", 200));
	empHdr.AddEmployee(new PermanentWorker("임꺽정", 300));
	empHdr.AddEmployee(new PermanentWorker("전우치", 400));

	// 영업직 사원 추가
	SalesWorker * seller = new SalesWorker("영업맨", 500, 0.1);

	// 영업 실적 추가
	seller->AddSalesResult(7000);

	// 영업직 등록
	empHdr.AddEmployee(seller);

	// 알바 사원 추가
	AlbaWorker * alba = new AlbaWorker("알바몬", 8530);

	// 알바 근무 시간
	alba->AddWorkTime(30);

	// 알바생 등록
	empHdr.AddEmployee(alba);



	seller->ShowSalaryInfo();
	cout << endl;
	alba->ShowSalaryInfo();



	// 현재 사원별 지급해야 할 급여정보 출력
	empHdr.ShowAllsalaryInfo();

	// 현재 지급해야 할 총 급여정보 출력
	empHdr.ShowTotalSalary();

	return 0;
}
