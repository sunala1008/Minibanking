#include <iostream>
#include <string>
#include "ScreenOut.h"

using namespace std;

class ACCOUNT
{
private:
	int accID;		// 계좌번호
	int balance;	// 잔액
	char * cusName; // 고객 이름

public:
	ACCOUNT(const int ID, const int money, const char * myname) // 생성자
		: accID(ID), balance(money)
	{
		int len = strlen(myname) + 1;
		cusName = new char[len];
		strcpy(cusName, myname);
	}

	//ACCOUNT(const ACCOUNT &copy) // default 복사 생성자
	//	: accID(copy.accID), balance(copy.balance)
	//{
	//	cusName = new char[strlen(copy.cusName) + 1];
	//	strcpy(cusName, copy.cusName);
	//}

	int getaccID()
	{
		return accID;
	}

	int getbalance()
	{
		return balance;
	}

	virtual void setplusbalance(int money)
	{
		balance += money;
	}

	void setminusbalance(int money)
	{
		balance -= money;
	}

	char * getcusName()
	{
		return cusName;
	}

	~ACCOUNT() // 소멸자
	{
		delete[]cusName;
	}
};

class NormalAccount : public ACCOUNT	// 일반 예금 계좌 entity class
{
private:
	int roi;		// 이율

public:
	NormalAccount(const int ID, const int Money, const char * myname, const int rate)
		: ACCOUNT(ID, Money, myname), roi(rate)
	{}

	//NormalAccount(const NormalAccount &copy) // default 복사 생성자
	//	: ACCOUNT(copy.getaccID, copy.getbalance, copy.getcusName), roi(copy.roi)
	//{	}

	int getroi()
	{
		return roi;
	}

	void setplusbalance(int money)
	{
		ACCOUNT::setplusbalance(money + money * roi * 0.01);
	}
};

class HighCreditAccount : public NormalAccount	// 신용 신뢰 계좌 entity class
{	
private:
	int plusroi;		// 추가 이율

public:
	HighCreditAccount(const int ID, const int Money, 
		const char * myname, const int rate, const int prate)
		: NormalAccount(ID, Money, myname, rate)
	{
		plusroi = prate;
	}

	//HighCreditAccount(const HighCreditAccount &copy) // default 복사 생성자
	//	: NormalAccount(copy.getaccID, copy.getbalance, copy.getcusName, copy.getroi),
	//		plusroi(copy.plusroi)
	//{	}

	void setplusbalance(int money)
	{
		ACCOUNT::setplusbalance(money + money * ((getroi() + plusroi) * 0.01));
	}
};

class AccountHandler
{
private:
	ACCOUNT * accArr[100];		// 계좌를 관리할 배열
	int accNum;				// 개설된 계좌 수 

public:
	AccountHandler() : accNum(0) // 생성자
	{}

	void NormalMakeAccount(void);			// 일반 계좌 개설 
	void CreditMakeAccount(void);			// 신용 계좌 개설
	void DepositMoney(void) const;			// 입금
	void WithdrawMoney(void) const;			// 출금
	void AccMenu(void);						// 계좌 개설 메뉴
	void ShowAllAccInfo(void) const; 		// 잔액조회
};

int main(void)
{
	AccountHandler ACC;
	int choice;

	while (1)
	{
		ShowMenu();
		cout << "메뉴 선택 : ";
		cin >> choice;
		cout << endl;
		
		switch (choice)
		{
		case MAKE:
			ACC.AccMenu();
			break;
		case DEPOSIT:
			ACC.DepositMoney();
			break;
		case WITHDRAW:
			ACC.WithdrawMoney();
			break;
		case INQUIRE:
			ACC.ShowAllAccInfo();
			break;
		case EXIT:
			break;
		default:
			cout << "  ※ 없는 메뉴입니다. 다시 선택해주세요. ※" << endl << endl;
			getchar();
			getchar();
		}

		if (choice == EXIT)
			break;
	}

	return 0;
}

void AccountHandler::AccMenu(void)
{
	int choice;

	while (1)
	{
		ShowAccMenu();
		cout << "메뉴 선택 : ";
		cin >> choice;
		cout << endl;

		switch (choice)
		{
		case NORMAL:
			NormalMakeAccount();
			break;
		case CREDIT:
			CreditMakeAccount();
			break;
		case UP:
			break;
		default:
			cout << "※ 없는 메뉴입니다. 다시 선택해주세요. ※" << endl << endl;
			getchar();
			getchar();
		}

		if (choice == UP)
			break;
	}
}

void AccountHandler::NormalMakeAccount(void)	// 일반 계좌 개설
{
	system("cls");

	int id;					// 계좌 번호
	char name[50];			// 고객 명
	int balance;			// 금액
	int roi;				// 이율

	cout << "=============== 일반 계좌 개설 ===============" << endl;
	cout << "  ※ 이율은 한 자리 숫자로 입력 해주세요. ※" << endl << endl;
	cout << "계좌번호 : "; cin >> id;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->getaccID() == id)
		{
			cout << endl;
			cout << "   ※ 이미 등록된 계좌번호입니다. ※" << endl;
			getchar();
			getchar();
			return;
		}
	}

	cout << "고 객 명 : "; cin >> name;
	cout << "금    액 : "; cin >> balance;

	if (balance < 0)
	{
		cout << "   ※ 금액을 다시 입력해주세요. ※" << endl;
		getchar();
		getchar();
		return;
	}

	cout << "이    율 : "; cin >> roi;
	cout << "==============================================" << endl;
	accArr[accNum++] = new NormalAccount(id, balance, name, roi);
	cout << "	☞ 계좌가 생성되었습니다. ☜" << endl;
	cout << "==============================================" << endl;
	getchar();
	getchar();
}

enum { LEVEL_A = 7, LEVEL_B = 4, LEVEL_C = 2 }; // 신용 등급
void  AccountHandler::CreditMakeAccount(void)	// 신용 계좌 개설
{
	system("cls");

	int id;					// 계좌 번호
	char name[50];			// 고객 명
	int balance;			// 잔액
	int roi;				// 기본 이율
	int proi;				// 추가 이율

	cout << "============ 신용 신뢰  계좌 개설 ============" << endl;
	ShowCreditLevel();
	cout << "   ※ 이율은 한 자리 숫자로 입력해주세요. ※" << endl << endl;
	cout << " ※ 추가이율도 한 자리 숫자로 입력해주세요. ※" << endl << endl;;
	cout << "계좌번호 : "; cin >> id;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->getaccID() == id)
		{
			cout << endl;
			cout << "   ※ 이미 등록된 계좌번호입니다. ※" << endl;
			getchar();
			getchar();
			return;
		}
	}

	cout << "고 객 명 : "; cin >> name;
	cout << "잔    액 : "; cin >> balance;

	if (balance < 0)
	{
		cout << "   ※ 금액을 다시 입력해주세요. ※" << endl;
		getchar();
		getchar();
		return;
	}

	cout << "기본이율 : "; cin >> roi;
	cout << "추가이율 : "; cin >> proi;

	if (!(proi == LEVEL_A || proi == LEVEL_B || proi == LEVEL_C))
	{
		cout << "※ 추가 이율을 다시 입력해주세요. ※" << endl;
		getchar();
		getchar();
		return;
	}

	cout << "==============================================" << endl;
	accArr[accNum++] = new HighCreditAccount(id, balance, name, roi, proi);
	cout << "	☞ 계좌가 생성되었습니다. ☜" << endl;
	cout << "==============================================" << endl;
	getchar();
	getchar();
}

void AccountHandler::DepositMoney(void) const	// 입금
{
	system("cls");

	int money; // 입금액
	int id;    // 계좌번호
	
	cout << "=================== 입  금 ===================" << endl;
	cout << "계좌번호 : "; cin >> id;
	cout << "입 금 액 : "; cin >> money;
	cout << "==============================================" << endl;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->getaccID() == id)
		{
			if (!(accArr[i]->getaccID() == id))
			{
				cout << "	※ 없는 계좌번호입니다. ※" << endl;
				cout << "==============================================" << endl;
				getchar();
				getchar();
				return;
			}

			accArr[i]->setplusbalance(money);
			cout << "		♬ 입금 완료 ♬" << endl;
			cout << "==============================================" << endl;
			getchar();
			getchar();
			return;
		}
	}
}

void AccountHandler::WithdrawMoney(void) const	// 출금
{
	system("cls");

	int money;  // 출금액
	int id;		// 계좌번호
	
	cout << "=================== 출  금 ===================" << endl;
	cout << "계좌번호 : "; cin >> id;
	cout << "출 금 액 : "; cin >> money;
	cout << "==============================================" << endl;

	for (int i = 0; i < accNum; i++)
	{
		if (accArr[i]->getaccID() == id)
		{
			if (!(accArr[i]->getaccID() == id))
			{
				cout << "	    ※ 없는 계좌번호입니다. ※" << endl;
				cout << "==============================================" << endl;
				getchar();
				getchar();
				return;
			}

			if (accArr[i]->getbalance() < money)
			{
				cout << "	    ※ 잔액이 부족합니다. ※" << endl;
				cout << "==============================================" << endl;
				getchar();
				getchar();
				return;
			}

			accArr[i]->setminusbalance(money);
			cout << "		♬ 출금 완료 ♬" << endl;
			cout << "==============================================" << endl;
			getchar();
			getchar();

			return;
		}
	}
}

void AccountHandler::ShowAllAccInfo(void) const
{
	system("cls");

	for (int i = 0; i < accNum; i++)
	{
		cout << "==============================================" << endl;
		cout << "[ " << i + 1 << "번째 고객 정보 ]" << endl;
		cout << "계좌번호 : " << accArr[i]->getaccID() << endl;
		cout << "고 객 명 : " << accArr[i]->getcusName() << endl;
		cout << "잔    액 : " << accArr[i]->getbalance() << endl;
		cout << "==============================================" << endl;
	}

	getchar();
	getchar();
}

